package hk.com.caretech.clive.idata_android;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import androidx.annotation.Nullable;

import java.sql.Timestamp;

import hk.com.caretech.clive.idata_android.Utils.SyncStatus;

public class SQLiteDBHelper extends SQLiteOpenHelper {

    public static final String DB_NAME = "idata";

    public static final String TABLE_TEMP = "temperature";
    public static final String TEMP_COLUMN_ELDER_ID = "elder_id";
    public static final String TEMP_COLUMN_TEMP = "temperature";
    public static final String TEMP_COLUMN_DEVICE_ID = "device_id";
    public static final String TEMP_COLUMN_TIMESTAMP = "timestamp";
    public static final String TEMP_COLUMN_STATUS = "status";

    public static final String TABLE_ELDER = "elder";
    public static final String ELDER_COLUMN_ID = "id";
    public static final String ELDER_COLUMN_NAME = "name";
    public static final String ELDER_COLUMN_BED_NO = "bed_no";


    //database version
    private static final int DB_VERSION = 1;

    public SQLiteDBHelper(@Nullable Context context) {
        super(context, DB_NAME, null, DB_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        final String sql_temp = " CREATE TABLE IF NOT EXISTS " + TABLE_TEMP
                + "( "
                + TEMP_COLUMN_ELDER_ID + " INTEGER NOT NULL, "
                + TEMP_COLUMN_TEMP + " FLOAT NOT NULL, "
                + TEMP_COLUMN_DEVICE_ID + " VARCHAR NOT NULL, "
                + TEMP_COLUMN_TIMESTAMP + " LONG NOT NULL, "
                + TEMP_COLUMN_STATUS + " INTEGER NOT NULL, "
                + " PRIMARY KEY (" + TEMP_COLUMN_DEVICE_ID + ", " + TEMP_COLUMN_TIMESTAMP +")"
                +");";

        final String sql_elder = " CREATE TABLE IF NOT EXISTS " + TABLE_ELDER
                + "( "
                + ELDER_COLUMN_ID + " INTEGER NOT NULL, "
                + ELDER_COLUMN_NAME + " VARCHAR, "
                + ELDER_COLUMN_BED_NO + " INTEGER, "
                + " PRIMARY KEY (" + ELDER_COLUMN_ID + ")"
                +");";

        db.execSQL(sql_temp);
        db.execSQL(sql_elder);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        String sql_temp = " DROP TABLE IF EXISTS "+ TABLE_TEMP;
        String sql_elder = " DROP TABLE IF EXISTS "+ TABLE_ELDER;
        db.execSQL(sql_temp);
        db.execSQL(sql_elder);
        onCreate(db);
    }



    /*
     * This method is taking four arguments
     * temp is "temperature" measured by thermometer
     * elder_id is the id of elders collected from server or manually input by user
     * device_id is the unique id of device generated by android system
     * status has two posible values:
     * 1 means the name is synced with the server
     * 0 means the name is not synced with the server
     * */
    public boolean addEldertoLocal(int id, String name, int bed_no) {
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues contentValues = new ContentValues();
        contentValues.put(ELDER_COLUMN_ID, id);
        contentValues.put(ELDER_COLUMN_NAME, name);
        contentValues.put(ELDER_COLUMN_BED_NO, bed_no);
        db.insert(TABLE_ELDER, null, contentValues);
        //db.close();
        Log.i(TAG, "addElder");
        return true;
    }



    /**saving Temperature to local storage
     *
     * @param temp
     * @param elder_id
     * @param device_id
     * @param status
     * The status has two possible values:
     *      * 1 means the data is synced with the server
     *      * 0 means the data is not synced with the server
     *      * Normally, 0 should be stored first
     */
    public boolean addTemptoLocal(int elder_id, float temp, String device_id, long timestamp, int status) {
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues contentValues = new ContentValues();
        contentValues.put(TEMP_COLUMN_ELDER_ID, elder_id);
        contentValues.put(TEMP_COLUMN_TEMP, temp);
        contentValues.put(TEMP_COLUMN_DEVICE_ID, device_id);
        contentValues.put(TEMP_COLUMN_TIMESTAMP, timestamp);
        contentValues.put(TEMP_COLUMN_STATUS, status);
        Log.i(TAG, "check added timestamp :" +timestamp);
        db.insert(TABLE_TEMP, null, contentValues);
        //db.close();
        Log.i(TAG, "addTemp");
        return true;
    }

    /*
     * This method taking two arguments as surrogate key
     * to change the status to be sync status
     *
     * */
    public void updateDataStatusToSync(String device_id, long timestamp) {
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues contentValues = new ContentValues();
        contentValues.put(TEMP_COLUMN_STATUS, SyncStatus.SYNCHONISED);
        String whereQuery = TEMP_COLUMN_DEVICE_ID + " = '" + device_id + "' AND " + TEMP_COLUMN_TIMESTAMP + " = '" + timestamp + "'";

        db.update(TABLE_TEMP, contentValues, whereQuery, null);

        //Don't close the db here, it will be closed at outside(should be in syncadapter) of this method
       // db.close();
    }

    /*
     * this method will give us all the local temperature data
     * */
    public Cursor getTemp() {
        SQLiteDatabase db = this.getReadableDatabase();
        String sql = " SELECT * FROM " + TABLE_TEMP + " ORDER BY " + TEMP_COLUMN_TIMESTAMP + " DESC;";
        Cursor c = db.rawQuery(sql, null);
        return c;
    }

    /*
     * this method will give us all the local temperature data
     * */
    public Cursor getElder() {
        SQLiteDatabase db = this.getReadableDatabase();
        String sql = " SELECT * FROM " + TABLE_ELDER + " ORDER BY " +ELDER_COLUMN_ID + " ASC;";
        Cursor c = db.rawQuery(sql, null);
        return c;
    }

    /*
     * get the local data by individual elder id from Temperature table
     * */
    public Cursor getTempById(int elder_id) {
        SQLiteDatabase db = this.getReadableDatabase();
        String sql = " SELECT * FROM " + TABLE_TEMP + " WHERE " + TEMP_COLUMN_ELDER_ID + " = " +elder_id;
        Cursor c = db.rawQuery(sql, null);
        return c;
    }

    /*
     * get the local data by individual id from Elder table
     * */
    public Cursor getElderById(int id) {
        SQLiteDatabase db = this.getReadableDatabase();
        String sql = " SELECT * FROM " + TABLE_ELDER + " WHERE " + ELDER_COLUMN_ID + " = " +id;
        Cursor c = db.rawQuery(sql, null);
        return c;
    }


    /*
     * this method is for getting all the unsynced temps
     * so that we can sync it with database
     * */
    public Cursor getUnsyncedData() {
        SQLiteDatabase db = this.getReadableDatabase();
        String sql = "SELECT * FROM " + TABLE_TEMP + " WHERE " + TEMP_COLUMN_STATUS + " = 0;";
        Cursor c = db.rawQuery(sql, null);
        return c;
    }



    public int deleteAllLocalData()
    {
        SQLiteDatabase sqLiteDatabase=getWritableDatabase();
        int rowDeleted=sqLiteDatabase.delete(TABLE_TEMP,null,null);
        return rowDeleted;
    }

    static String TAG =SQLiteDBHelper.class.getName();
}
